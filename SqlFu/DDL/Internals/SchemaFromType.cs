using System;
using System.Collections.Generic;
using System.Data;
using System.Reflection;
using SqlFu.Internals;
using System.Linq;

namespace SqlFu.DDL.Internals
{
    internal class SchemaFromType
    {
        private readonly Type _tp;
        private TableSchema _schema;
        private readonly TableInfo _ti;

        public SchemaFromType(Type tp)
        {
            _tp = tp;
            _ti = TableInfo.ForType(_tp);
        }

        public string TableName
        {
            get { return _ti.Name; }
        }

        public void Process(TableSchema schema)
        {
            _schema = schema;
            _schema.Name = _ti.Name;
            _schema.CreationOption = _ti.CreationOptions;
            ProcessColumns();
            ProcessIndexes();
            ProcessPrimaryKey();
            ProcessForeignKeys();
        }

        private void ProcessPrimaryKey()
        {
            var att = _tp.GetModelAttributes<PrimaryKeyAttribute>().FirstOrDefault();
            if (att != null)
            {
                _schema.Constraints.SetPrimaryKey(string.Join(",", att.Columns), att.Name);
                _ti.AutoGenerated = att.AutoIncrement;
            }
            else
            {
                if (!_ti.PrimaryKey.IsNullOrEmpty())
                {
                    _schema.Constraints.SetPrimaryKey(_ti.PrimaryKey);
                }
            }
        }

        private void ProcessIndexes()
        {
            var att = _tp.GetModelAttributes<IndexAttribute>().ToArray();
            
            if (att.Length > 0)
            {
                foreach (var idx in att)
                {
                    _schema.Indexes.AddIndex(string.Join(",", idx.Columns), idx.IsUnique, idx.Name);
                }
            }
        }

        private void ProcessForeignKeys()
        {
            foreach (var pi in _tp.GetProperties())
            {
                var fks = pi.GetModelAttributes<ForeignKeyAttribute>();
                foreach (var fk in fks)
                {
                    _schema.Constraints.AddForeignKey(pi.Name, fk.ParentTable, fk.ParentColumn, fk.OnUpdate, fk.OnDelete,
                                                    fk.KeyName);
                }
            }
        }

     
        IEnumerable<PropertyInfo> GetProps(Type tp)
        {
            var props = new List<PropertyInfo>();
            var baseTP = tp;
            while (baseTP != null)
            {
                props.AddRange(baseTP.GetProperties(BindingFlags.DeclaredOnly|BindingFlags.Public|BindingFlags.Instance).Select(d=>tp.GetProperties().First(f=>f.Name==d.Name)).Reverse());
                baseTP = baseTP.BaseType;
            }
            props.Reverse();
            return props;
        }

        private void ProcessColumns()
        {
            foreach (var pi in GetProps(_tp))
            {
                var opt = pi.GetModelAttributes<ColumnOptionsAttribute>().FirstOrDefault();
                
                if (opt != null && opt.Ignore) continue;
                
                
                var col = AddColumn(pi, opt ?? ColumnOptionsAttribute.Default);

                var red = pi.GetModelAttributes<RedefineForAttribute>();
                foreach (var def in red)
                {
                    col.Redefine(def.Database, def.Definition);
                }
            }
        }

        private ColumnDefinition AddColumn(PropertyInfo pi, ColumnOptionsAttribute attr)
        {
            DbType type;
            var tp = pi.PropertyType;
            var asString = pi.GetModelAttributes<InsertAsStringAttribute>().FirstOrDefault();
            if (asString != null)
            {
                type = DbType.String;
            }
            else
            {
                if (tp.IsEnum)
                {
                    tp = Enum.GetUnderlyingType(tp);
                }
                type = FromType(tp);
            }


            var col = new ColumnDefinition();
            col.Name = pi.Name;
            col.DefaultValue = attr.DefaultValue;
            col.IsIdentity = (_ti.PrimaryKey == col.Name && _ti.AutoGenerated);
            col.Size = attr.Size;
            col.Type = type;
            if (pi.PropertyType.IsNullable())
            {
                col.IsNullable = true;
            }
            else
            {
                col.IsNullable = attr.IsNullable;
            }
            _schema.Columns.AddColumn(col);
            return col;
        }

        public static DbType FromType(Type type)
        {
            var dict = new Dictionary<Type, DbType>();

            dict.Add(typeof (Int32), DbType.Int32);
            dict.Add(typeof (Int32?), DbType.Int32);
            dict.Add(typeof (Int16), DbType.Int16);
            dict.Add(typeof (Int16?), DbType.Int16);
            dict.Add(typeof (Int64), DbType.Int64);
            dict.Add(typeof (Int64?), DbType.Int64);
            dict.Add(typeof (Single), DbType.Single);
            dict.Add(typeof (Single?), DbType.Single);
            dict.Add(typeof (Byte), DbType.Byte);
            dict.Add(typeof (Byte?), DbType.Byte);
            dict.Add(typeof (string), DbType.String);
            dict.Add(typeof (Guid), DbType.Guid);
            dict.Add(typeof (Guid?), DbType.Guid);
            dict.Add(typeof (byte[]), DbType.Binary);
            dict.Add(typeof (bool), DbType.Boolean);
            dict.Add(typeof (bool?), DbType.Boolean);
            dict.Add(typeof (double), DbType.Double);
            dict.Add(typeof (double?), DbType.Double);
            dict.Add(typeof (DateTime), DbType.DateTime);
            dict.Add(typeof (DateTime?), DbType.DateTime);
            dict.Add(typeof (DateTimeOffset), DbType.DateTimeOffset);
            dict.Add(typeof (DateTimeOffset?), DbType.DateTimeOffset);
            dict.Add(typeof (TimeSpan), DbType.String);
            dict.Add(typeof (TimeSpan?), DbType.String);
            dict.Add(typeof (decimal), DbType.Decimal);
            dict.Add(typeof (decimal?), DbType.Decimal);


            DbType rez;
            if (dict.TryGetValue(type, out rez))
            {
                return rez;
            }
            throw new InvalidOperationException(string.Format("Can't map '{0}' to a DbType", type.Name));
        }
    }
}